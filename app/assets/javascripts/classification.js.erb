function Rank(){
	this.team_name;
	this.points;
	this.matches_played;
	this.victories;
	this.draws;
	this.goals_difference;
	this.goals_for;
}

function Match(){
	this.team_a;
	this.score_a;
	this.team_b;
	this.score_b;
}

function Classification(group_id){
	this.group_id = group_id;
	this.classification = [];
	this.matches = [];

	for (var i = 0; i < 4; i++) {
		var tableLine = document.getElementById("group[" + this.group_id + "][" + i + "]");
		this.classification[i] = new Rank();
		this.classification[i].team_name = tableLine;
		tableLine = tableLine.nextElementSibling;
		this.classification[i].points = tableLine;
		tableLine = tableLine.nextElementSibling;
		this.classification[i].matches_played = tableLine;
		tableLine = tableLine.nextElementSibling;
		this.classification[i].victories = tableLine;
		tableLine = tableLine.nextElementSibling;
		this.classification[i].draws = tableLine;
		tableLine = tableLine.nextElementSibling;
		this.classification[i].goals_difference = tableLine;
		tableLine = tableLine.nextElementSibling;
		this.classification[i].goals_for = tableLine;
	}
}

Classification.prototype.addMatch = function (match_id){
	var obj = this;

	var index = this.matches.length;
	this.matches[index] = new Match();

	var matchLine = document.getElementById("match[" + this.group_id + "][" + match_id + "]");

	this.matches[index].team_a = matchLine.alt;
	matchLine = matchLine.nextElementSibling.nextElementSibling;
	this.matches[index].score_a = matchLine;
	this.matches[index].score_a.onchange = function(event) {
        obj.updateClassification();
    }
    this.matches[index].score_a.onkeydown = function (e) {
        allowIntegersOnly(e);
    }
	matchLine = matchLine.nextElementSibling.nextElementSibling;
	this.matches[index].team_b = matchLine.alt;
	matchLine = matchLine.nextElementSibling.nextElementSibling;
	this.matches[index].score_b = matchLine;
	this.matches[index].score_b.onchange = function(event) {
        obj.updateClassification();
    }
    this.matches[index].score_b.onkeydown = function (e) {
        allowIntegersOnly(e);
    }
}

Classification.prototype.updateClassification = function (){
	var ranks = [];
	var ranking =[];
	
	//calculate points
	for (var i = 0; i < this.matches.length; i++) {
		
		if(ranks[this.matches[i].team_a] == undefined){
			ranks[this.matches[i].team_a] = new Rank();
			ranks[this.matches[i].team_a].points = 0;
			ranks[this.matches[i].team_a].matches_played = 0;
			ranks[this.matches[i].team_a].victories = 0;
			ranks[this.matches[i].team_a].draws = 0;
			ranks[this.matches[i].team_a].goals_difference = 0;
			ranks[this.matches[i].team_a].goals_for = 0;
			ranking[ranking.length] = this.matches[i].team_a;
		}

		if(ranks[this.matches[i].team_b] == undefined){
			ranks[this.matches[i].team_b] = new Rank();
			ranks[this.matches[i].team_b].points = 0;
			ranks[this.matches[i].team_b].matches_played = 0;
			ranks[this.matches[i].team_b].victories = 0;
			ranks[this.matches[i].team_b].draws = 0;
			ranks[this.matches[i].team_b].goals_difference = 0;
			ranks[this.matches[i].team_b].goals_for = 0;
			ranking[ranking.length] = this.matches[i].team_b;
		}

		if (this.matches[i].score_a.value != "" && this.matches[i].score_b.value != ""){
			var goals_a = parseInt(this.matches[i].score_a.value);
			var goals_b = parseInt(this.matches[i].score_b.value);

			ranks[this.matches[i].team_a].matches_played += 1;
			ranks[this.matches[i].team_b].matches_played += 1;

			ranks[this.matches[i].team_a].goals_difference += (goals_a - goals_b);
			ranks[this.matches[i].team_b].goals_difference += (goals_b - goals_a);

			ranks[this.matches[i].team_a].goals_for += goals_a;
			ranks[this.matches[i].team_b].goals_for += goals_b;

			if(goals_a > goals_b){

				ranks[this.matches[i].team_a].points += 3;
				ranks[this.matches[i].team_a].victories += 1;

			}else if(goals_a == goals_b){

				ranks[this.matches[i].team_a].points += 1;
				ranks[this.matches[i].team_a].draws += 1;

				ranks[this.matches[i].team_b].points += 1;
				ranks[this.matches[i].team_b].draws += 1;

			}else{

				ranks[this.matches[i].team_b].points += 3;
				ranks[this.matches[i].team_b].victories += 1;
			}
		}
	}
	
	//rank teams
	for (var i = 0; i < ranking.length; i++) {
		for (var j = i + 1;  j < ranking.length; j++) {
			if (ranks[ranking[i]].points < ranks[ranking[j]].points) {
				var temp = ranking[i];
				ranking[i] = ranking[j];
				ranking[j] = temp;
			} else if (ranks[ranking[i]].points == ranks[ranking[j]].points){
				if (ranks[ranking[i]].goals_difference < ranks[ranking[j]].goals_difference) {
					var temp = ranking[i];
					ranking[i] = ranking[j];
					ranking[j] = temp;
				}
			}
		}
	}

	//update table
	for (var i = 0; i < this.classification.length; i++) {
		this.classification[i].team_name.innerHTML = (i + 1) + ". " + ranking[i];
		this.classification[i].points.innerHTML = ranks[ranking[i]].points;
		this.classification[i].matches_played.innerHTML = ranks[ranking[i]].matches_played;
		this.classification[i].victories.innerHTML = ranks[ranking[i]].victories;
		this.classification[i].draws.innerHTML = ranks[ranking[i]].draws;
		this.classification[i].goals_difference.innerHTML = ranks[ranking[i]].goals_difference;
		this.classification[i].goals_for.innerHTML = ranks[ranking[i]].goals_for;
	}
}

function allowIntegersOnly(e){
	// Allow: backspace, delete, tab, escape, enter and .
    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
         // Allow: Ctrl+A
        (e.keyCode == 65 && e.ctrlKey === true) || 
         // Allow: home, end, left, right
        (e.keyCode >= 35 && e.keyCode <= 39)) {
             // let it happen, don't do anything
             return;
    }
    // Ensure that it is a number and stop the keypress
    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
        e.preventDefault();
    }
}

function collapse(id){
	if($("#games" + id).is(":visible")){
		$("#classification" + id).hide();
		$("#games" + id).hide();
		$("#collapsor" + id).removeClass("not_collapsed");
		$("#collapsor" + id).addClass("collapsed");
	} else {
		$("#classification" + id).show();
		$("#games" + id).show();
		$("#collapsor" + id).removeClass("collapsed");
		$("#collapsor" + id).addClass("not_collapsed");
	}
}
